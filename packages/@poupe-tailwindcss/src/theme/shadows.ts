import {
  type CSSRules,
  renameRules,
} from '@poupe/css';

import type { Theme } from './types';
import { defaultPrefix } from './utils';

/**
 * Generates a set of shadow styles based on the provided theme configuration.
 *
 * @param theme - The theme configuration object containing theme prefix and options
 * @returns A tuple with two CSS rule objects: regular shadows and inset shadows
 * @remarks
 * This function creates the base shadow values that will be used for:
 * 1. Drop shadows (--drop-shadow-*): For use with the drop-shadow filter property
 * 2. Regular shadows (--shadow-*): For use with the box-shadow property
 * 3. Inset shadows (--inset-shadow-*): For inset box shadows
 *
 * Regular and drop shadows include z1 (lowest) through z5 (highest) elevation levels,
 * each with carefully calibrated opacity and offset values. Inset shadows provide a
 * pressed/inset effect with a single default style.
 *
 * All shadows use the `--{prefix}shadow-rgb` variable with appropriate opacity levels.
 * The RGB variable is automatically generated by `makeThemeBases()`:
 * - When dark/light themes exist: direct RGB values from Hct colors
 * - When dark/light themes don't exist: CSS Level 4 fallback syntax
 */
export const makeShadows = (theme: Theme, reset: boolean = true): [CSSRules, CSSRules] => {
  const { themePrefix } = theme.options;

  // Use RGB variable - automatically generated by makeThemeBases()
  const rgbValues = `var(--${themePrefix}shadow-rgb)`;

  // Helper function to create color with opacity using rgb()
  const color = (opacity: number) => `rgb(${rgbValues} / ${opacity.toFixed(2)})`;

  const c15 = color(0.15);
  const c17 = color(0.17);
  const c19 = color(0.19);
  const c20 = color(0.2);
  const c30 = color(0.3);
  const c37 = color(0.37);

  // Level 1: Subtle elevation - smallest footprint
  const z1 = `0 1px 4px 0 ${c37}`;

  // Level 2: Light elevation - default for most floating elements
  const z2 = `0 2px 2px 0 ${c20}, 0 6px 10px 0 ${c30}`;

  // Level 3: Medium elevation - for prominent UI elements
  const z3 = `0 11px 7px 0 ${c19}, 0 13px 25px 0 ${c30}`;

  // Level 4: High elevation - for important modal windows
  const z4 = `0 14px 12px 0 ${c17}, 0 20px 40px 0 ${c30}`;

  // Level 5: Maximum elevation - for critical or temporarily focused elements
  const z5 = `0 17px 17px 0 ${c15}, 0 27px 55px 0 ${c30}`;

  // Inset shadow - for pressed/active states
  const inset = `inset 0 2px 4px 0 ${c20}`;

  // No shadow - use transparent shadow to maintain composability
  const none = '0 0 0 0 transparent';

  // Define regular shadow variations
  const shadows: CSSRules = {
    ...(reset ? { '*': 'initial' } : {}),
    z1,
    z2,
    DEFAULT: z2, // Default shadow is equivalent to z2
    z3,
    z4,
    z5,
    none,
  };

  // Define inset shadow variations
  const insetShadows: CSSRules = {
    ...(reset ? { '*': 'initial' } : {}),
    DEFAULT: inset,
    none,
  };

  return [shadows, insetShadows];
};

/**
 * Generates prefixed CSS variables for all shadow types.
 *
 * @param theme - The theme configuration object
 * @returns An array of CSS rule objects with prefixed variables:
 *   1. Box shadow variables (--shadow-*)
 *   2. Drop shadow variables (--drop-shadow-*)
 *   3. Inset shadow variables (--inset-shadow-*)
 */
export const makeShadowRules = (theme: Theme, reset: boolean = true): CSSRules[] => {
  const [shadows, insetShadows] = makeShadows(theme, reset);

  return [
    renameRules(shadows, (s: string) => defaultPrefix(s, '--shadow')),
    renameRules(shadows, (s: string) => defaultPrefix(s, '--drop-shadow')),
    renameRules(insetShadows, (s: string) => defaultPrefix(s, '--inset-shadow')),
  ];
};
