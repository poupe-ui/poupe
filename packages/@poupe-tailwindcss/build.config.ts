import { defineBuildConfig } from 'unbuild';

import {
  mkdirSync,
  writeFileSync,
} from 'node:fs';

import {
  join,
} from 'pathe';

import {
  type ThemeOptions,
  type ColorFormat,

  colorFormatter,
  formatTheme,
  makeThemeFromPartialOptions,
} from './src/theme/index';

type FileThemeOptions<K extends string> = {
  theme: Partial<ThemeOptions<K>>
  format?: ColorFormat
};

const debugThemes = false;

const themes: Record<string, FileThemeOptions<string>> = {
  style: {
    theme: {
      debug: debugThemes,
      omitTheme: true,
    },
  },
};

function writeTheme<K extends string>(dirname: string, filename: string, format: ColorFormat | undefined, themeOptions: Partial<ThemeOptions<K>>) {
  const theme = makeThemeFromPartialOptions(themeOptions);
  const [indent, newLine] = ['  ', '\n'];

  const lines = formatTheme(theme, 'class', indent, colorFormatter(format));
  const content = [
    '/* This file is auto-generated by @poupe/tailwindcss. DO NOT EDIT */',
    '',
    ...lines,
    '',
  ].join(newLine);

  const destdir = join(process.cwd(), dirname);
  mkdirSync(destdir, { recursive: true });
  writeFileSync(join(destdir, filename), content);
  console.log(`[writeTheme] Wrote ${content.length} bytes to ${join(dirname, filename)}`);
}

export default defineBuildConfig({
  entries: [
    { input: 'src/index', name: 'index' },
    { input: 'src/theme/index', name: 'theme' },
    { input: 'src/utils/index', name: 'utils' },
    { input: 'src/assets', name: 'assets', builder: 'copy' },
  ],
  declaration: true,
  sourcemap: true,

  hooks: {
    'build:prepare'() {
      // assemble assets
      for (const [filename, { theme, format }] of Object.entries(themes)) {
        writeTheme('src/assets', `${filename}.css`, format, theme);
      }
    },
  },
});
