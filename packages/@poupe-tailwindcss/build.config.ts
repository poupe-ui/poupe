import { defineBuildConfig } from 'unbuild';
import { execSync } from 'node:child_process';
import {
  mkdirSync,
  writeFileSync,
} from 'node:fs';

import {
  join,
} from 'pathe';

import {
  type ThemeOptions,
  type ColorFormat,

  colorFormatter,
  formatTheme,
  makeThemeFromPartialOptions,
} from './src/theme/index';

type FileThemeOptions<K extends string> = {
  theme: Partial<ThemeOptions<K>>
  format?: ColorFormat
};

const debugThemes = false;

const themes: Record<string, FileThemeOptions<string>> = {
  default: {
    theme: {
      debug: debugThemes,
    },
  },
  style: {
    theme: {
      debug: debugThemes,
      omitTheme: true,
    },
  },
};

function writeTheme<K extends string>(dirname: string, filename: string, format: ColorFormat | undefined, themeOptions: Partial<ThemeOptions<K>>) {
  const theme = makeThemeFromPartialOptions(themeOptions);
  const [indent, newLine] = ['  ', '\n'];

  const lines = formatTheme(theme, 'class', indent, colorFormatter(format));
  const content = [
    '/* This file is auto-generated by @poupe/tailwindcss. DO NOT EDIT */',
    '',
    ...lines,
    '',
  ].join(newLine);

  const destdir = join(process.cwd(), dirname);
  mkdirSync(destdir, { recursive: true });
  writeFileSync(join(destdir, filename), content);
  console.log(`[assets] ✔ Wrote ${content.length} bytes to ${join(dirname, filename)}`);
}

function generateCSSForExample(name: string, needsContent: boolean) {
  const basePath = `examples/${name}`;
  const inputPath = `${basePath}/input.css`;
  const outputPath = `${basePath}/output.css`;
  const contentPath = needsContent ? `${basePath}/index.html` : undefined;

  const command = contentPath
    ? `pnpx @tailwindcss/cli -i ${inputPath} -o ${outputPath} --content ${contentPath}`
    : `pnpx @tailwindcss/cli -i ${inputPath} -o ${outputPath}`;

  try {
    execSync(command, { stdio: 'pipe' });
    console.log(`[examples] ✔ Successfully generated: ${outputPath}`);
  } catch (error: unknown) {
    console.error(`[examples] ✘ Failed to generate: ${outputPath}`);
    console.error(`Command: ${command}`);
    console.error(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    throw error;
  }
}

export default defineBuildConfig({
  entries: [
    { input: 'src/index', name: 'index' },
    { input: 'src/theme/index', name: 'theme' },
    { input: 'src/utils/index', name: 'utils' },
    { input: 'src/assets', name: 'assets', builder: 'copy' },
  ],
  declaration: true,
  sourcemap: true,

  hooks: {
    'build:prepare'() {
      // assemble assets
      for (const [filename, { theme, format }] of Object.entries(themes)) {
        writeTheme('src/assets', `${filename}.css`, format, theme);
      }
    },
    'build:done'() {
      // generate example CSS files
      const examples = [
        { dir: 'plugin-workflow', needsContent: true },
        { dir: 'flat-plugin', needsContent: false },
        { dir: 'theme-plugin', needsContent: false },
      ];

      for (const { dir, needsContent } of examples) {
        generateCSSForExample(dir, needsContent);
      }
    },
  },
});
